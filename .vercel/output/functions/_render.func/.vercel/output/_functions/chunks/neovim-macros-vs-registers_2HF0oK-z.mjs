const id = "neovim-macros-vs-registers.mdx";
						const collection = "blog";
						const slug = "neovim-macros-vs-registers";
						const body = "\nimport { Code } from \"astro:components\";\nimport macroVideo from \"./assets/videos/macro.webm\";\nimport macroVideo2 from \"./assets/videos/macro2.webm\";\nimport globalVideo from \"./assets/videos/global1.webm\";\n\n<video controls=\"\" autoplay=\"\" loop=\"true\">\n  <source src={macroVideo} type=\"video/webm\"/>\n</video>\n\nIn Neovim, which is better, **macros** or **normal** mode? You may be surprised\nat the power of normal mode, and the **execute** command, compared to\nmanaging macros with plugins.\n\nOne question you might ask is, if normal mode can perform the same job as macros, then in which cases would you use\nmacros? Probably when you use them regularly and in different projects. However, you can do this with `execute \"norm\"` commands too, by saving them as keybindings.\n\n## Why normal mode\nWhen using normal mode, You get to practice writing normal commands live, while looking at the code, rather than\n   try to decipher a dense string of characters that doesn't make sense in an\n   editable list format, without the original context. I would say it's better to get good at vim motions and be\n   prepared to write them at-will rather than spend time writing and organizing\n   macros. Yes, there are macro plugins that help you organize them, but I found\nthat editing and remembering which macro was which, was quite cumbersome.\n\nYou should note that regardless of how you are recording your commands, is that it's better to use <kbd>fFtT</kbd> and <kbd>hjkl</kbd> than <kbd>wb</kbd>, since targeting the beginning\n   of a word is way more recognizable in command form than contextual word navigation. For example, no on wants to see a macro with `hhhhhjjkkkjdw`.\n\n## Global commands\nOne cool trick is to use a `g` *(global)* command to make a change to every location of a word in a file.\nFor example, what if we wanted to use a normal command to ugprade the syntax of an older javascrirpt file?\nWe would execute the following command:\n```vim\n:g :g/function /execute \"norm cwconst^[f(i = \u001bf{i=> \u001b\"\n```\n\nExecuting `:g /function /execute \"norm cwconst^[f(i = ^[f{i=> ^[\"` will change the function syntax to arrow function syntax for all instances of the word `function`.\nNote that the `^]` symbols are special - they were inserted via <kbd>Ctrl-V</kbd> and then <kbd>Esc</kbd>. Note they are purple in the command box. If `^] is not colored differently`, than it will not work as the special escape syntax.\n\n<video controls=\"\" autoplay=\"\" loop=\"true\">\n  <source src={macroVideo2} type=\"video/webm\"/>\n</video>\n\nAnother trick is the `:g/found/v/notfound/{cmd}` syntax &mdash; in this\nexample, a command is being run on lines that contain `function`, but *do not*\ncontain `test`. This a potentially way to delete all your code but keep your\ntest! Seriously, don't try this at home.\n\n<video controls=\"\" autoplay=\"\" loop=\"true\">\n  <source src={globalVideo} type=\"video/webm\"/>\n</video>\n\\\n\nI also found that recording macros often requires multiple tries, which distracts you from whatever you're working on.\n   You won't be able to immediately use the macro, since you will have to go back and edit it.\n   It's better to just write the normal mode command and use it immediately.\n   Then type `let @q='<C-R>q'` and then edit the macro inside the quotes. I think it's better than polluting your buffers.\n\nAdditionally, I had made several enjoyable macros, but forgot what they do and well, deciphering letters\n   takes more time than to just not use the macro. \n\n## Another example\n\nIn my [Wezterm] config, I wanted to see if I could replace\nall instead of `a.[Wezterm method]` with `act.[Wezterm method]`, where a Wezterm\nmethod is a command available in the wezterm action API, like\n`wezterm.action.SendKey` or `wezterm.action.SplitHorizontal`. I could have used\nfind and replace with a regex string, like `%s/act.[A-Z+]/a.[A-Z+]/g`, but to\nhelp solve the normal mode debate, I tried doing this with a normal mode\ncommand.\n\n1. First, I set the \"find\" register (`@\\`) to my search string:\n\n   ```regex\n    \\ a.[A-Z*]\n   ```\n\n1. Then I ran this command:\n\n   ```vim\n   :171,$norm nlact^[\"\n   ```\n\n1. Result: `a.AdjustPanelSize` and `a.ActivePaneDirection` have been\n   updated to have a prefix of `act.` instead of `a.`, as well as any other\n   methods that started with `act.`. Now, the variable `a` can be deleted.\n\nHowever, it is not easy to deal with the escape characters, and the command is\nnot very readable. A better solution is to use the `execute` command:\n\n```vim\nexecute \"159,165norm 0fc2dw\"\n```\n\nThis command means, if the cursor was directly below the `*` character below, running `:execute \"2,4norm\nfc2dw\"` would move the cursor to the `c` in `config` on line 2, and delete the word\n`config` on lines 2, 3, and 4.\n\nIn other words, it would change this:\n```lua annotate\n  * config.a = 1,\n--  ^<\n-- [cursor should be here]\n    config.b = 2,\n    config.c = 3\n```\n\n*into this:*\n```lua\n{a = 1,b = 2,c = 3}\n```\n\\\nIn Neovim, macros are stored as their actual commands, and in order to add a\ndescription to them, a plugin is needed. This turned out to be more tricky than\nI had expected, as this is a case when the most popular plugins on Github are\nactually not to be recommended. The first result, [NeoComposer](https://github.com/ecthelionvi/NeoComposer.nvim),\nmade little sense to use unless you always kept your macro list to at most 7 macros and you are able to easily decipher all of them.\n(macros are displayed as virtual text and you can \"scroll\" through the macros\nvia <kbd>C-n</kbd> and <kbd>C-p</kbd>.\n\n<video controls=\"\" autoplay=\"\" loop=\"true\">\n  <source src={macroVideo} type=\"video/webm\"/>\n</video>\n\nI considered forking the project but I knew my macro collection would be big\nenough to require searching. The next most popular plugin was [Macrobatics](https://github.com/svermeulen/vim-macrobatics),\nwhich looked to be exactly what I wanted, but I had this need for everything to be\nusing the Neovim Lua API, and not direct vim commands, and actually the plugin\njust did not work on my machine, so I searched Github until i found one that\nactually worked well — [telescope-macros](https://github.com). Adding a\ntelescope finder is a clever and simple solution and I applaud the author  \nan editable list is the only thing needed to manage a macro library.\n\nIf I have a macro assigned to the `@l` register, using `telescope-macros`, I\ncan apply it repeatedly via <kbd>leader->ml</kbd>: <kbd>leader->m</kbd> opens the telescope\nmacros list, `l` finds the macro under the `@l` register, and `<cr>` closes the\nwindow and applies the macro.\n\nI felt some modifications were essential to make — for instance, adding a key\nbinding to [[☆ Telescope keymap]] that would close the modal and navigate to\nthe previewed file. Why isn't that part of telescope by default? I searched for\nexamples and found none other than [[ThePrimeagen]]'s telescope\nmodifications, and I took his `get_preview` function, which would open the\nbuffer from the preview window in the editor.\n\nHowever, his function didn't work and I punted on the idea after trying and\nfailing to get AI to help. Later on, I actually found Google Duet to be the most\nproficient as writing Neovim functions.\n";
						const data = {title:"Neovim macros vs normal mode",description:"A discussion on the benefits of using normal mode commands versus macros in Neovim.",pubDate:new Date(1702962000000),cover:
						new Proxy({"src":"/_astro/macros.qRd2izsX.png","width":3490,"height":2254,"format":"png","fsPath":"/Users/aaron/Code/astro/fullstack-dev-blog/src/content/blog/assets/macros.png"}, {
						get(target, name, receiver) {
							if (name === 'clone') {
								return structuredClone(target);
							}
							if (name === 'fsPath') {
								return "/Users/aaron/Code/astro/fullstack-dev-blog/src/content/blog/assets/macros.png";
							}
							
							return target[name];
						}
					})
					,coverAlt:"Telescope macro extension",tags:["neovim","quick tips"]};
						const _internal = {
							type: 'content',
							filePath: "/Users/aaron/Code/astro/fullstack-dev-blog/src/content/blog/neovim-macros-vs-registers.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
