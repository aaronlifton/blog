const id = "speculation-rules-api.mdx";
						const collection = "blog";
						const slug = "speculation-rules-api";
						const body = "\nEnabling the Speculation Rules API with AstroJS\n\nIn the modern web development landscape, page loading speed is integral to user\nexperience. any web application. Speculation Rules API, an experimental feature,\nis pretty much a game changer, as page loads will become instant as the client\nfetches them, based on pre-configured rules. This post is intended to guide\ndevelopers through the process of integrating the Speculation Rules API with\nAstroJS.\n\n## Integration of Speculation Rules API with AstroJS\n\nAstroJS is my favorite frontend framework, because it allows you to create a\n\"turtles all the way down\"-style component heirarchy [@fn1](). This means you can\nuse Svelte components, inside of Astro components, inside of Lit components, and\nso-on. This is a great way to learn a new framework, and in my opinion, this is\nthe best framework for developing \"developer blogs\", as many others have also\ndone. This site is implemented in AstroJS as well. is a front-end framework that\n\nAstroJS enables you to pre-render your prefetched pages on the client in\nsupported browsers\\[^5^\\]. Additionally, AstroJS overrides the standard prefetch\nbehavior, globally applying the Speculation Rules API to prerender links on the\nclient\\[^4^\\].\n\nThis is done by configuring the `astro.config.mjs` file\\[^4^\\]. Once you include\ndesired `prefetch` configurations in this file, the experimental Speculation\nRules API kicks in, preparing the page for quicker—sometimes instant—page\nloads\\[^2^\\]. Here's how to enable this in the Astro configuration:\n\n```javascript\n{\n  prefetch: {\n    prefetchAll: true,\n    defaultStrategy: 'viewport',\n  },\n  experimental: {\n    clientPrerender: true,\n  },\n}\n```\n\n## Prerendering with Speculation Rules API\n\nPrerendering is a technique used by browsers to load a document before it's\nneeded, such as while hovering over a link\\[^fn3]. The Speculation Rules API\nenhances this by allowing you to prefetch and **(most importantly)**, prerender\nthe next page navigation[^fn2]. This results in basically instant page loads,\nleading to the sought-after \"desktop app\"-like user experience[^fn2].\n\nWith the Speculation Rules API, speculation rules are taken in the form of a\nJSON structure that determines what resources should be prefetched or\nprerendered by the browser. So, developers the room to define rules by\nwhich certain URLs are dynamically prefetched or prerendered based on user\ninteraction[^fn3]. Here's an example of how the `speculationrules` attribute\nmight be used in a script tag:\n\n```html\n<script type=\"speculationrules\">\n\n{\n\n  \"prerender\": [\n\n    {\"source\": \"list\", \"urls\": [\"/about\", \"/contact\", \"/blog\"]}\n\n  ]\n\n}\n\n</script>\n```\n\n\\\nHowever, no actual speculation is being done. One possible way to prerender\nthe \"right\" pages, so as to not waste countless CPU cycles, is to load user\nfavorites, like favorite brands on an e-commerce, or their most frequently\naccessed pages.\n\n```html\n<script type=\"javascript\">\n  const session = Session.current()\n  const userFavorites = API.Brands.favorites({user}).sortBy((brandA) =>\n    brand.viewCount - brandB.viewCount\n  )\n</script>\n<script type=\"speculationrules\">\n\n  {\n\n    \"prerender\": [\n\n      {\"source\": \"list\", \"urls\": userFavorites.slice(10)}\n\n    ]\n\n  }\n\n</script>\n```\n\\\nNote that before implementing this, you should review the possible risks when\nprerendering on the client[^fn1]. Debugging speculation rules can be tricky,\nparticularly for prerendered pages[^fn2]. However, Chrome provides developer\ntools with the `performance.getEntriesByType('navigation')[0].activationStart`\nfunction that allows you to verify if a page was prerendered[^fn3].\n\n## Concluding Remarks\n\nLet's make the web faster - try implementing Speculating Rules on your site\ntoday! If you haven't tried AstroJS yet, try that too!\n\n[^fn1]:\n[Speculation Rules API - Web APIs](https://developer.mozilla.org/docs/Web/API/Speculation_Rules_API)\n\n[^fn2]:\n[Debugging speculation rules | Blog | Chrome for Developers](https://developer.chrome.com/blog/debugging-speculation-rules/)\n\n[^fn3]:\n[Speculation Rules – WordPress plugin | WordPress.org](https://wordpress.org/plugins/speculation-rules/)\n\n[^fn4]:\n[Prerender pages in Chrome for instant page navigations](https://developer.chrome.com/docs/web-platform/prerender-pages)\n\n[^fn5]:\n[Configuration Reference | Docs - Astro Documentation](https://docs.astro.build/en/reference/configuration-reference/)\n\n[^fn16:\n [Astro Islands](https://docs.astro.build/en/concepts/islands/)\n```\n";
						const data = {title:"Speculation rules API",description:"How to use the speculation rules API to create a custom speculative parser for your website.",pubDate:new Date(1706590800000),cover:
						new Proxy({"src":"/_astro/speculation-rules.AyjN7cgU.png","width":2060,"height":938,"format":"png","fsPath":"/Users/aaron/Code/astro/fullstack-dev-blog/src/content/blog/assets/speculation-rules.png"}, {
						get(target, name, receiver) {
							if (name === 'clone') {
								return structuredClone(target);
							}
							if (name === 'fsPath') {
								return "/Users/aaron/Code/astro/fullstack-dev-blog/src/content/blog/assets/speculation-rules.png";
							}
							
							return target[name];
						}
					})
					,coverAlt:"Speculation rules can be seen in the new 'Preloading' section of Chrome Developer Tools",tags:["web-standards","speculation-rules"],draft:true};
						const _internal = {
							type: 'content',
							filePath: "/Users/aaron/Code/astro/fullstack-dev-blog/src/content/blog/speculation-rules-api.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
