---
import BaseHead from "$components/BaseHead.astro";
import CodeText from "$components/CodeText.astro";
import IconTextLink from "$components/IconTextLink.astro";
import FormattedDate from "$components/FormattedDate.astro";
import Header from "$components/Header.astro";
import IconButton from "$components/react/IconButton";
import PostStats from "$components/PostStats.svelte";
import Prose from "$components/Prose.astro";
import Tags from "$components/Tags.astro";
import ZoomImage from "$components/ZoomImage.svelte";
import Layout from "$/layouts/Layout.astro";
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import TOC from "$components/TOC.astro";
import type { CollectionEntry } from "astro:content";
import clsx from "clsx";
import "@radix-ui/themes/styles.css";
import { getSlugFromPathname } from "$/util";
import "$/styles/shaku.css";

type Props = CollectionEntry<"blog">["data"] & { headings: MarkdownHeading[] };
const {
  title,
  description,
  pubDate,
  updatedDate,
  cover,
  coverAlt,
  tags,
  headings,
} = Astro.props;

const slug = getSlugFromPathname(Astro.url.pathname);

const tocEmpty = headings.length === 0;
---

<Layout>
  <Fragment slot="head">
    <BaseHead title={title} description={description} cover={cover.src} />
  </Fragment>
  <Fragment slot="header">
    <Header />
  </Fragment>
  <Prose>
    <div
      data-blog-post-container
      data-toc={{ toc: tocEmpty ? "closed" : "open" }}
      class:list={[
        "group flex flex-col lg:flex-row-reverse lg:gap-8",
        !tocEmpty && "lg:flex-row-reverse",
      ]}
    >
      {
        !tocEmpty && (
          <aside
            style={{
              "--offset-from-top": "1rem",
            }}
            class:list={[
              "relative",
              "shrink-0",
              "mb-0",
              "lg:mb-8",
              "lg:ml-auto",
              "lg:mb-0",
              "lg:basis-1/3",
              "lg:sticky",
              "lg:top-[var(--offset-from-top)]",
              "lg:h-[calc(100vh-var(--offset-from-top)_*_2)]",
              "[&_h2]:m-0",
              "max-w-prose",
            ]}
          >
            <IconButton
              data-toggle-toc
              variant="rounded-full"
              data-open-toc-label={"Open ToC"}
              data-closed-toc-label={"Close ToC"}
              aria-label={"Close Table of Contents"}
              style={{
                // @ts-ignore
                "--duration": "150ms",
              }}
              data-preload
              className={clsx(
                "z-1",
                "absolute",
                "top-4",
                "right-4",
                "hidden",
                "lg:grid",
                "lg:min-w-0",
                "lg:group-data-toc-open:grid-cols-[0fr_max-content]",
                "lg:group-data-toc-closed:grid-cols-[1fr_max-content]",
                "transition-all",
                "duration-[var(--duration)]",
                "ease-in-out",
                "overflow-hidden",
                "lg:justify-center",
                "p-6",
              )}
            >
              <Icon
                name="tabler/x"
                class={clsx(
                  "col-start-2",
                  "col-end-2",
                  "row-start-1",
                  "row-end-1",
                  "scale-0",
                  "transition-transform",
                  "duration-[var(--duration)]",
                  "ease-out",
                  "group-data-toc-open:scale-100",
                  "group-data-toc-open:delay-[var(--duration)]",
                  "fill-slate-100",
                  "border-md border-2 text-slate-400",
                  "bg-slate-200",
                  "text-slate-600",
                )}
              />

              <Icon
                name="tabler/list"
                class={clsx(
                  "col-start-2",
                  "col-end-2",
                  "row-start-1",
                  "row-end-1",
                  "scale-0",
                  "transition-transform",
                  "duration-[var(--duration)]",
                  "ease-in",
                  "group-data-toc-closed:scale-100",
                  "group-data-toc-closed:delay-[var(--duration)",
                )}
              />

              <div
                class:list={[
                  "col-start-1",
                  "col-end-1",
                  "group-data-toc-closed:mx-2",
                  "truncate",
                ]}
              >
                Open ToC
              </div>
            </IconButton>

            <div
              data-blog-post-toc-container
              data-preload
              class:list={[
                "lg:h-full",
                "lg:p-4",
                "lg:ml-auto",
                "lg:group-data-toc-open:translate-x-0",
                "lg:group-data-toc-open:scale-x-1",
                "lg:group-data-toc-open:opacity-1",
                "lg:group-data-toc-closed:translate-x-full",
                "lg:group-data-toc-closed:opacity-0",
                "lg:group-data-toc-closed:scale-x-0",
                "lg:group-data-toc-closed:pointer-events-none",
                "transition-[transform,opacity]",
                "duration-300",
                "ease-in-out",
              ]}
            >
              <TOC headings={headings} />
            </div>
          </aside>
        )
      }
      <!-- /** min-w-0 [&>pre]:my-8 [&>pre]:max-sm:full-bleed [&>[data-codeblock]]:my-8 -->
      <!-- [&>[data-codeblock]]:max-sm:full-bleed [&>[data-codeblock]_pre]:max-sm:rounded-none -->
      <div data-blog-post class="min-w-0">
        <div class="hero-image">
          {
            false && cover && (
              <ZoomImage src={cover.src} alt={coverAlt} caption={coverAlt} hero>
                <Image
                  src={cover}
                  widths={[240, 540, 720, cover.width]}
                  sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${cover.width}px`}
                  alt={coverAlt}
                />
              </ZoomImage>
            )
          }
          <Tags tags={tags} />
          <div class="prose">
            <div class="title">
              <span class="date mb-3">
                <FormattedDate date={pubDate} />
                {
                  updatedDate && (
                    <div class="last-updated-on">
                      Last updated on <FormattedDate date={updatedDate} />
                    </div>
                  )
                }
              </span>
              <PostStats {slug} client:load />
              <h1 class="text-3xl"><CodeText text={title} /></h1>
              <hr class="not-prose" />
            </div>
            <slot />
            <IconTextLink
              data-back-to-top
              text="Back to top"
              iconName="tabler/chevron-up"
            />
          </div>
        </div>
      </div>
    </div>
  </Prose>
</Layout>
<style>
  /* Size Modifiers: https://github.com/tailwindlabs/tailwindcss-typography#size-modifiers */
  /* Color Themes: https://github.com/tailwindlabs/tailwindcss-typography#color-modifiers */
  [data-back-to-top] {
    @apply cursor-pointer no-underline;
  }
  .hero-image {
    @apply max-w-full;
  }
  .hero-image img {
    display: block;
    margin: 0 auto;
    border-radius: 12px;
    box-shadow: var(--box-shadow);
  }
  .title {
    margin-bottom: 1em;
    padding: 1em 0;
    text-align: center;
    line-height: 1;
  }
  .title h1 {
    @apply mb-6 mt-4;
  }
  .last-updated-on {
    font-style: italic;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const blogPostContainer = document.querySelector(
      "[data-blog-post-container]",
    ) as HTMLElement;
    const toggleTocButton = document.querySelector(
      "[data-toggle-toc]",
    ) as HTMLElement;
    const tocContainer = document.querySelector(
      "[data-blog-post-toc-container]",
    );

    const storedTocState = localStorage.getItem("__preferred_toc_state");
    if (storedTocState !== null) {
      if (storedTocState === "open") {
        openToc();
      } else {
        closeToc();
      }
    }

    function openToc() {
      blogPostContainer?.setAttribute("data-toc", "open");
      toggleTocButton.setAttribute("data-state", "open");
      saveState("open");
      toggleTocButton.setAttribute(
        "aria-label",
        toggleTocButton.dataset.offLabel ?? "",
      );
    }

    function closeToc() {
      blogPostContainer?.setAttribute("data-toc", "closed");
      saveState("closed");
      toggleTocButton.setAttribute(
        "aria-label",
        toggleTocButton.dataset.openTocLabel ?? "",
      );
    }

    toggleTocButton?.addEventListener("click", () => {
      const tocIsOpen = blogPostContainer.dataset.toc === "open";
      if (tocIsOpen) {
        closeToc();
        tocContainer?.addEventListener(
          "transitionend",
          () => {
            tocContainer.classList.add("invisible");
          },
          {
            once: true,
          },
        );
      } else {
        openToc();
        tocContainer?.classList.remove("invisible");
      }
    });

    type TocState = "open" | "closed";

    function saveState(state: TocState) {
      localStorage.setItem("__preferred_toc_state", state);
    }

    const backToTopButton = document.querySelector("[data-back-to-top]");
    backToTopButton?.addEventListener("click", () => {
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    });
  });
</script>
