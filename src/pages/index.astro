---
import { type CollectionEntry, getCollection } from "astro:content";
import { SITE_DESCRIPTION } from "$/consts";
import PostPreviewList from "$components/PostPreviewList.astro";
import PostPreviewListFooter from "$components/PostPreviewListFooter.astro";
import { all, createStarryNight } from "@wooorm/starry-night";
export const prerender = true;
//
// let posts: CollectionEntry<"blog">[] = await getCollection("blog");
// posts = Array.from(posts)
// 	.filter((post) => !post.data.draft)
// 	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
//
//
// let allCodes: CodeResults = [];
// const livePosts = posts.filter((post) => !post.data.draft);
// let codes: CodeResults = [];
//
// for (const post of livePosts) {
//   const codes = await getCodesFromMdx(post.body, { numLines: 6 });
// }
// codes = codes.map((code) => ({ ...code, post }));
// allCodes = allCodes.concat(codesthPost);

let posts: CollectionEntry<"blog">[] = await getCollection("blog");
posts = Array.from(posts).filter((post) => !post.data.draft);

let allCodes: CodeResults = [];
for (const post of posts) {
	const codes = await getCodesFromMdx(post.body, { numLines: 6 });
	if (!codes) continue;

	const codesWithPost: CodeResults = codes.map((code) => ({ ...code, post }));
	allCodes = allCodes.concat(codesWithPost);
}

const highlighterInstance = atom<Highlighter | null>(null);

let highlighter = highlighterInstance.get();
if (!highlighter) {
	const starryNight = await createStarryNight(all);
	highlighterInstance.set(starryNight);
	highlighter = starryNight;
}
---

<Layout
  seo={{
    extend: {
      link: [
        {
          rel: "alternate",
          type: "application/rss+xml",
          href: "/posts/index.xml",
        },
      ],
    },
  }}
>
  <div class="hero flex justify-center pb-vert-padding">
    <div class="hero__tagline flex justify-center">
      <Prose className="prose prose-base mb-3 text-center lg:prose-base">
        {SITE_DESCRIPTION}
      </Prose>
    </div>
  </div>
  <div
    class="flex flex-col gap-0 rounded-lg border border-2 border-black bg-card-bg bg-opacity-50 p-4
    scrollbar-thin scrollbar-track-card-bg sm:flex-row sm:gap-6">
     <LatestCodeList client:load codes={allCodes} highlighter={highlighter} />
  </div>

  <!-- <div class="flex flex-col"> -->
  <!--   <div -->
  <!--     class="my-4 flex w-1/2 flex-col gap-0 rounded-lg border border-2 border-card-border bg-card-bg bg-opacity-50 p-4" -->
  <!--   > -->
  <!--     <DeployWatch /> -->
  <!--   </div> -->
  <!-- </div> -->
  <PostPreviewList posts={posts} heading="Recent posts" asCard />
  <!-- <PostPreviewList posts={po {deploys.map((deploy) => (

    <ul>
      <h2>Deploy ID: {deploy.deploy.id}</h2>
      <li>Status: {deploy.deploy.status}</li>
      <li>Trigger: {deploy.deploy.trigger}</li>
      <li>Created At: {deploy.deploy.createdAt}</li>
      <li>Updated At: {deploy.deploy.updatedAt}</li>
      <li>Finished At: {deploy.deploy.finishedAt}</li>
    </ul>
  ))}sts} heading="Recent posts" /> -->
  <PostPreviewListFooter />
</Layout>
