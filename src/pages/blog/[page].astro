---
import { PAGE_SIZE, SITE_TITLE } from "$/consts.ts";
import Pages from "$components/Pages.svelte";
import PostPreviewList from "$components/PostPreviewList.astro";
import PostPreviewListFooter from "$components/PostPreviewListFooter.astro";
import Layout from "$layouts/Layout.astro";
import { type CollectionEntry, getCollection } from "astro:content";

type Props = {
  page: {
    currentPage: number;
    data: CollectionEntry<"blog">[];
    lastPage: number;
    pageSize: number;
  };
};

export async function getStaticPaths({
  paginate,
}: {
  paginate: (
    data: CollectionEntry<"blog">[],
    options: { pageSize: number },
  ) => string[];
}) {
  let posts: CollectionEntry<"blog">[] = await getCollection("blog");
  posts = posts
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

  return paginate(posts, { pageSize: PAGE_SIZE });
}
// All paginated data is passed on the "page" prop
export const prerender = true;
const { page }: Props = Astro.props;
---

<Layout>
  {
    page && (
      <Fragment>
        <div class="flex justify-center items-center mb-vert-padding">
          <p
            class="mb-0 text-base italic text-center translate-x-2/4 full not-prose"
          >
            Page {page.currentPage}
          </p>
        </div>
        <PostPreviewList
          posts={page.data}
          heading="Posts"
          asCard
          noTransition
        />
        <PostPreviewListFooter />
        <Pages
          baseUrl={Astro.url.pathname.slice(0, -2)}
          currentPage={page.currentPage}
          totalPages={page.lastPage}
        />
      </Fragment>
    )
  }
</Layout>
