---
interface Props {
  title: string;
  body: string;
  href: string;
}

const { href, title, body } = Astro.props;

const draw = (e) => {
  if (isDrawing) {
    e.target.classList.add("active");
  }
};

document.addEventListener("astro:page-load", () => {
  const container = document.querySelector("#container");
  const clearBtn = document.querySelector("#clear");
  let isDrawing = false;

  const drawGrid = () => {
    for (let i = 0; i < 400; i++) {
      let pixel = document.createElement("div");
      pixel.classList.add("pixel");
      container.appendChild(pixel);
    }
  };
  drawGrid();

  container.addEventListener("mousedown", (e) => {
    isDrawing = true;
    draw(e);
  });

  container.addEventListener("mouseup", () => {
    isDrawing = false;
  });

  container.addEventListener("mouseover", (e) => {
    draw(e);
  });
  const clearAllPixels = () => {
    let pixels = document.querySelectorAll(".pixel");
    pixels.forEach((pixel) => {
      if (pixel.classList.contains("active")) {
        setTimeout(function () {
          pixel.classList.remove("active");
        }, 50);
      }
    });
  };

  clearBtn.addEventListener("click", () => {
    clearAllPixels();
    setTimeout(function () {
      drawGrid();
    }, 50);
  });
});
---

<div id="container"></div>
<button id="clear">Clear All</button>
<li class="link-card">
  <a href={href}>
    <h2>
      {title}
      <span>&rarr;</span>
    </h2>
    <p>
      {body}
    </p>
  </a>
</li>

<style>
  #container {
    display: grid;
    grid-template-columns: repeat(20, 20px);
  }
  .pixel {
    width: 20px;
    height: 20px;
    border: 1px solid #ddd;
    box-sizing: border-box;
  }
  .active {
    background-color: #fa4d56;
  }
  .link-card {
    list-style: none;
    display: flex;
    padding: 1px;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }
  .link-card > a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    border-radius: 8px;
    color: white;
    background-color: #23262d;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }
  p {
    margin-top: 0.5rem;
    margin-bottom: 0;
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent-light));
  }
</style>
