---
import { getCodesFromMdx, type CodeResults } from "$util/markdown";
import { Code } from "astro:components";
import { getCollection, type CollectionEntry } from "astro:content";
import PlayPause from "$components/react/PlayPause";

const codeOrder = [
	"vim",
	"tsx",
	"jsx",
	"ts",
	"js",
	"typescript",
	"javascript",
	"ruby",
	"go",
	"rust",
	"lua",
	"bash",
	"json",
	"shell",
	"html",
	"css",
];

type SortValue = -1 | 0 | 1;
function codeSort(a: CodeResults[0], b: CodeResults[0]): SortValue {
	if (a.lang === b.lang) return 0;
  const aIndex = codeOrder.indexOf(a.lang);
  const bIndex = codeOrder.indexOf(b.lang);
	if (aIndex === -1) return 1;
	if (bIndex === -1) return -1;

  return a < b ? -1 : a > b ? 1 : 0;
	return 0;
}

const posts: CollectionEntry<"blog">[] = await getCollection("blog");
let allCodes: CodeResults = [];
const livePosts = posts.filter((post) => !post.data.draft);
for (const post of livePosts) {
	const codes = await getCodesFromMdx(post.body, { numLines: 6 });
	if (!codes) continue;

	const codesWithPost: CodeResults = codes.map((code) => ({ ...code, post }));
	allCodes = allCodes.concat(codesWithPost).sort(codeSort);
}
