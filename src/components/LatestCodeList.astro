---
import { getCodesFromMdx, type CodeResults } from "$util/markdown";
import { Code } from "astro:components";
import { getCollection, type CollectionEntry } from "astro:content";
import PlayPause from "$components/react/PlayPause";

const posts: CollectionEntry<"blog">[] = await getCollection("blog");
let allCodes: CodeResults = [];
const livePosts = posts.filter((post) => !post.data.draft);
for (const post of livePosts) {
	const codes = await getCodesFromMdx(post.body, { numLines: 6 });
	if (!codes) continue;

	const codesWithPost: CodeResults = codes.map((code) => ({ ...code, post }));
	allCodes = allCodes.concat(codesWithPost);
}
---

<style>
  h5 {
    @apply mb-0;
  }
  .codes-container {
    overflow: scroll;
    @apply scrollbar-thin scrollbar-track-card-bg/0 scrollbar-thumb-amethyst-300;
    scroll-behavior: smooth;
  }
  .codes-container > div {
    font-size: 0.7rem;
  }
  .codes-container pre.astro-code {
    @apply scrollbar-thumb-amethyst-300;
  }
  .code {
    @apply mx-4 max-w-[80ch] snap-start rounded-md border border-gray-200 p-0 p-4
        transition-colors duration-300 ease-in-out scrollbar-thin;
  }
  .code-container {
    @apply scrollbar-track-card-bg/0 scrollbar-thumb-amethyst-300;
  }
  .code.active {
    @apply border-amethyst-400;
  }
  .code-header {
    align-items: baseline;
  }
</style>

<div
  class:list={[
    "codes-header flex flex-col portrait:flex-row",
    "[&_~div]:portrait:translate-y-4",
  ]}
>
  <h5 class="portrait:grow">Latest code</h5>
  {/* @ts-ignore */}
  <PlayPause client:load className="icon-container" />
  <!-- <div class="output"></div> -->
</div>
<!-- if mobile needs more performance, use will-change-scroll -->
<div
  class="codes-container flex h-auto w-full snap-x snap-mandatory snap-always
  overflow-auto"
>
  {
    allCodes.map((code) => (
      <div class="code">
        <div class="code-header flex flex-row justify-between">
          <h2 class="flex grow pr-3 text-xl font-bold">{code.lang}</h2>
          {code.post && (
            <div class="truncate text-sm">
              <a href={`/blog/${code.post.slug}`}>{code.post.data.title}</a>
            </div>
          )}
        </div>
        {/* @ts-ignore */}
        <Code
          code={code.text}
          lang={code.lang}
          class="code-container"
          style="font-size:9px;"
        />
      </div>
    ))
  }
</div>
<script>
  import { isPaused } from "$state/LatestCodeListState";

  document.addEventListener("astro:page-load", () => {
    const codesContainer = document.querySelector(
      ".codes-container",
    ) as HTMLDivElement;
    const codes: NodeListOf<HTMLDivElement> = document.querySelectorAll(
      ".codes-container .code",
    );

    let currentIndex = 0;
    const intervalTime = 5000;

    const scrollNext = () => {
      if (!codesContainer) return;

      if (!isPaused.get()) {
        if (currentIndex >= codes.length) {
          currentIndex = 0;
        }

        codesContainer.scrollLeft =
          codes[currentIndex].offsetLeft - codesContainer.offsetLeft;
        // codes.forEach((code) => code.classList.remove("active"));
        // codes[(currentIndex + 1) % codes.length].classList.add("active");
        currentIndex++;
      }
    };

    setInterval(scrollNext, intervalTime);

    // const mouseEventWithinRect = (event: MouseEvent, rect: DOMRect): boolean => {
    //   return (
    //     event.clientX >= rect.left &&
    //     event.clientX <= rect.right &&
    //     event.clientY >= rect.top &&
    //     event.clientY <= rect.bottom
    //   );
    // };

    function onManualScroll() {
      if (!isPaused.get() || !codesContainer) return;
      let minDiff = Infinity;
      let closestIndex: number | undefined;

      const containerRect = codesContainer.getBoundingClientRect();
      codes.forEach((code, index) => {
        const rect = code.getBoundingClientRect();
        const diff = Math.abs(rect.left - containerRect.left);

        if (diff < minDiff) {
          minDiff = diff;
          closestIndex = index;
        }
      });
      if (closestIndex !== undefined) currentIndex = closestIndex;
      if (
        codes[codes.length - 1].getBoundingClientRect().right <=
        containerRect.left + codesContainer.clientWidth
      ) {
        currentIndex = 0;
      }
      if (currentIndex >= codes.length - 1) {
        currentIndex = 0;
      }
    }

    codesContainer?.addEventListener("touchstart", function () {
      isPaused.set(true);
    });
    codesContainer?.addEventListener("touchend", function () {
      if (!codesContainer) return;

      isPaused.set(false);
      onManualScroll();
    });

    codesContainer?.addEventListener("mouseenter", function () {
      isPaused.set(true);
    });
    codesContainer?.addEventListener("mouseleave", function () {
      if (!codesContainer) return;

      isPaused.set(false);
    });
    codesContainer?.addEventListener("scroll", onManualScroll);

    const iconContainer = document.querySelector("div[class*=_iconContainer]");

    iconContainer?.addEventListener("click", function () {
      const isPausedVal = isPaused.get();
      isPaused.set(!isPausedVal);
    });

    // const observer = new window.IntersectionObserver(
    //   (entries) => {
    //     entries.forEach(console.log);
    //     const leftmostEntry = entries.reduce((leftmost, entry) =>
    //       entry.intersectionRatio < leftmost.intersectionRatio ? entry : leftmost,
    //     );
    //     // add active class to leftmost element
    //     // if (leftmostEntry.isIntersecting) {
    //     codes.forEach((code) => code.classList.remove("active"));
    //     leftmostEntry.target.classList.add("active");
    //     // } else {
    //     //   leftmostEntry.target.classList.remove("active");
    //     // }
    //   },
    //   { threshold: 1 },
    // );
    //
    // codes.forEach((code) => observer.observe(code));
  });
</script>
