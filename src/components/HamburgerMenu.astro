---
import ThemeSelect from '@components/ThemeSelect.astro'
import IconButton from "$components/react/IconButton";
import { Icon } from "astro-icon/components";
import { menuItems } from "$util/menu.ts";

type IsActiveMenuItemOptions = {
	currentPathname: string;
	menuItemPathname: string;
	rootPathname: string;
};

export const isActiveMenuItem = ({
	currentPathname,
	menuItemPathname,
	rootPathname,
}: IsActiveMenuItemOptions) => {
	let isActive = currentPathname.startsWith(menuItemPathname);

	if (menuItemPathname === rootPathname) {
		isActive = currentPathname === menuItemPathname;
	}

	if (`${currentPathname}/` === rootPathname) {
		isActive = `${currentPathname}/` === menuItemPathname;
	}

	return isActive;
};
---

<aside
	id="sidenav"
	data-a11y-dialog="sidenav"
	aria-hidden="true"
	class="fixed z-50 h-full w-full"
	style="visibility: hidden;"
	data-hamburger-nav
>
	<div
		data-a11y-dialog-hide
		class="fixed inset-0 -z-1 mt-nav-height w-full bg-purple-50/50 backdrop-blur-sm"
	>
	</div>

	<div
		role="document"
		class="margin-auto z-50 ml-auto flex h-full w-full flex-col rounded-none bg-background py-0 will-change-transform"
	>
		<div
			data-close-btn
			class="mb-2 flex h-nav-height items-center justify-end px-horizontal-padding"
		>
			<IconButton
				variant="rounded-full"
				data-a11y-dialog-hide
				aria-label="Close"
			>
				<Icon name="tabler/x" />
			</IconButton>
		</div>

		<nav
			class="flex w-full translate-y-[-9px] flex-col"
			aria-label="Main navigation"
		>
			<ul
				class="flex h-full w-full list-none flex-col items-center justify-center overflow-y-auto border-4 border-secondary-foreground/55 bg-accent-foreground/75 p-3 px-horizontal-padding"
			>
				{
					menuItems.map((item) => {
						const isActive = isActiveMenuItem({
							currentPathname: Astro.url.pathname,
							menuItemPathname: item.pathname,
							rootPathname: "/",
						});

						return (
							<li class="mb-2 w-full">
								<a
									class:list={[
										"text=md not-prose block w-full rounded-full bg-[var(--on-primary)] px-4 py-2 text-center font-bold",
										"text-black transition-colors duration-200 ease-in-out focus:bg-accent-foreground focus:outline-none",
										"focus:ring-2 focus:ring-secondary-foreground focus:ring-opacity-50",
									]}
									href={item.pathname}
									color={isActive ? "primary" : "secondary"}
									{...(isActive && { "aria-current": "page" })}
								>
									const rateLimitRemaining =
									response.headers['x-ratelimit-remaining'];
									{item.name}
								</a>
							</li>
						);
					})
				}
			</ul>
		</nav>
	</div>
</aside>

<script>
	import A11yDialog from "a11y-dialog";

	const DIALOG_BACKDROP_ANIMATION_DURATION = 300;
	const DIALOG_CONTENT_ANIMATION_DURATION = 300;
	const maxAnimationDuration = Math.max(
		DIALOG_CONTENT_ANIMATION_DURATION,
		DIALOG_BACKDROP_ANIMATION_DURATION,
	);

	(() => {
		const dialogElement =
			document.querySelector<HTMLElement>("[data-a11y-dialog]");

		if (!dialogElement) {
			return;
		}
		const dialog = new A11yDialog(dialogElement);
		const backdrop = dialogElement.querySelector<HTMLElement>(
			"[data-a11y-dialog-hide]",
		);
		const content = dialogElement.querySelector<HTMLElement>("[role=document]");

		if (!backdrop || !content) {
			return;
		}

		const hideSidenav = () => {
			backdrop.style.transition = `opacity ${DIALOG_BACKDROP_ANIMATION_DURATION}ms ease`;
			content.style.transition = `transform ${DIALOG_CONTENT_ANIMATION_DURATION}ms ease`;
			dialogElement.style.transition = `visibility 0ms ${maxAnimationDuration}ms ease`;

			content.style.transform = "translateX(100%)";
			backdrop.style.opacity = "0";
			dialogElement.style.visibility = "hidden";

			document.body.style.overflowY = "visible";
		};

		const showSidenav = () => {
			dialogElement.style.transition = `visibility 0ms`;
			backdrop.style.transition = `opacity ${DIALOG_BACKDROP_ANIMATION_DURATION}ms ease`;
			content.style.transition = `transform ${DIALOG_CONTENT_ANIMATION_DURATION}ms ease`;

			dialogElement.style.visibility = "visible";
			backdrop.style.opacity = "1";
			content.style.transform = "translateX(0px)";

			dialogElement
				.querySelector<HTMLElement>("button[data-a11y-dialog-hide]")
				?.focus();

			document.body.style.overflowY = "hidden";
		};

		hideSidenav();

		dialogElement.addEventListener("show", () => {
			showSidenav();
		});

		dialogElement.addEventListener("hide", () => {
			hideSidenav();
		});

		document
			.querySelector("div[role=document]")
			?.addEventListener("click", () => {
				console.log(dialog);
				dialog.hide();
			});
	})();

	// document.addEventListener("astro:page-load", () => {
	//   const dialogElement =
	//     document.querySelector<HTMLElement>("[data-a11y-dialog]");
	//   const dialog = new A11yDialog(dialogElement);
	// });
</script>

<style>
	[data-close-btn] {
		opacity: 0;
	}
</style>
