---
interface Props {
  src: string;
  alt: string;
  link: string;
}

const { src, alt, link } = Astro.props;
import { Image } from "astro:assets";
// import CSS from "jsdom"

function makeSafeCSSId(str: string) {
  const safeString = str.replace(/[^a-zA-Z0-9-_]/g, "_");
  const hash = hashCode(safeString);
  return `img-button-${hash}`;
}

function hashCode(str: string) {
  let hash = 0;
  if (str.length === 0) {
    return hash;
  }
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return hash;
}
const buttonId = makeSafeCSSId(link);
---

<a href={link}>
  <Image {src} {alt} />
</a>
<button
  id={buttonId}
  type="button"
  class="inline-flex items-center gap-x-2 rounded-lg border border-transparent bg-blue-600 px-4 py-3 text-sm font-semibold text-white hover:bg-blue-700 disabled:pointer-events-none disabled:opacity-50 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
  data-hs-overlay="#hs-basic-modal"
>
  Open modal
</button>

<div
  id="hs-basic-modal"
  class="hs-overlay hs-overlay-open:opacity-100 hs-overlay-open:duration-500 pointer-events-none fixed start-0 top-0 z-[80] hidden h-full w-full overflow-y-auto overflow-x-hidden opacity-0 transition-all"
>
  <div
    class="hs-overlay-open:opacity-100 hs-overlay-open:duration-500 m-3 opacity-0 transition-all sm:mx-auto sm:w-full sm:max-w-lg"
  >
    <div
      class="pointer-events-auto flex flex-col rounded-xl border bg-white shadow-sm dark:border-gray-700 dark:bg-gray-800 dark:shadow-slate-700/[.7]"
    >
      <div
        class="flex items-center justify-between border-b px-4 py-3 dark:border-gray-700"
      >
        <h3 class="font-bold text-gray-800 dark:text-white">Modal title</h3>
        <button
          type="button"
          class="flex h-7 w-7 items-center justify-center rounded-full border border-transparent text-sm font-semibold text-gray-800 hover:bg-gray-100 disabled:pointer-events-none disabled:opacity-50 dark:text-white dark:hover:bg-gray-700 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
          data-hs-overlay="#hs-basic-modal"
        >
          <span class="sr-only">Close</span>
          <svg
            class="h-4 w-4 flex-shrink-0"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
          >
        </button>
      </div>
      <div class="overflow-y-auto p-4">
        <p class="mt-1 text-gray-800 dark:text-gray-400">
          This is a wider card with supporting text below as a natural lead-in
          to additional content.
        </p>
      </div>
      <div
        class="flex items-center justify-end gap-x-2 border-t px-4 py-3 dark:border-gray-700"
      >
        <button
          type="button"
          class="inline-flex items-center gap-x-2 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 shadow-sm hover:bg-gray-50 disabled:pointer-events-none disabled:opacity-50 dark:border-gray-700 dark:bg-slate-900 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
          data-hs-overlay="#hs-basic-modal"
        >
          Close
        </button>
        <button
          type="button"
          class="inline-flex items-center gap-x-2 rounded-lg border border-transparent bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700 disabled:pointer-events-none disabled:opacity-50 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
        >
          Save changes
        </button>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ buttonId }}>
  function toggleClass(elementId, className) {
    const element = document.getElementById(elementId);
    if (element.classList.contains(className)) {
      element.classList.remove(className);
    } else {
      element.classList.add(className);
    }
  }
  document.querySelector(`#${buttonId}`).addEventListener("click", () => {
    toggleClass(buttonId, "hidden");
  });
</script>
