---
import { getCodesFromMdx, type CodeResults } from "$util/markdown";
import { Code } from "astro:components";
import { getCollection, type CollectionEntry } from "astro:content";
import PlayPause from "$components/react/PlayPause";

const posts: CollectionEntry<"blog">[] = await getCollection("blog");
let allCodes: CodeResults = [];
let livePosts = posts.filter((post) => !post.data.draft);
for (const post of livePosts) {
  const codes = await getCodesFromMdx(post.body);
  if (!codes) continue;

  const codesWithPost: CodeResults = codes.map((code) => ({ ...code, post }));
  allCodes = allCodes.concat(codesWithPost);
}
---

<style>
  h5 {
    @apply mb-0;
  }
  .codes-container {
    overflow: scroll;
    @apply scrollbar-thin scrollbar-track-card-bg/0 scrollbar-thumb-amethyst-300;
    scroll-behavior: smooth;
  }
  .codes-container > div {
    font-size: 0.7rem;
  }
  .codes-container pre.astro-code {
    @apply scrollbar-thumb-amethyst-300;
  }
  .code {
    @apply mx-4 max-w-[80ch] snap-start rounded-md border border-gray-200 p-0 p-4
        transition-colors duration-300 ease-in-out scrollbar-thin hover:border-amethyst-400;
  }
  .code-container {
    @apply scrollbar-track-card-bg/0 scrollbar-thumb-amethyst-300;
  }
  .code.active {
    @apply border-amethyst-400;
  }
  .code-header {
    align-items: baseline;
  }
</style>

<div class="codes-header">
  <h5>Latest code</h5>
  {/* @ts-ignore */}
  <PlayPause client:load className="icon-container" />
  <div class="output"></div>
</div>
<div
  class="codes-container flex h-auto w-full snap-x snap-mandatory snap-always
  overflow-auto"
>
  {
    allCodes.map((code) => (
      <div class="code">
        <div class="code-header flex flex-row justify-between">
          <h2 class="flex grow pr-3 text-xl font-bold">{code.lang}</h2>
          <div class="truncate text-sm">
            <a href={`/blog/${code.post.slug}`}>{code.post.data.title}</a>
          </div>
        </div>
        {/* @ts-ignore */}
        <Code
          code={code.text}
          lang={code.lang}
          class="code-container"
          style="font-size:9px;"
        />
      </div>
    ))
  }
</div>
<script>
  const codesContainer = document.querySelector(".codes-container");
  const codes: NodeListOf<HTMLDivElement> = document.querySelectorAll(
    ".codes-container .code",
  );

  let currentIndex = 0;
  let isPaused = false;
  const intervalTime = 5000;

  const scrollNext = () => {
    if (!codesContainer) return;

    if (!isPaused) {
      if (currentIndex >= codes.length) {
        currentIndex = 0;
      }

      codesContainer.scrollLeft = codes[currentIndex].offsetLeft;
      // codes.forEach((code) => code.classList.remove("active"));
      // codes[(currentIndex + 1) % codes.length].classList.add("active");
      currentIndex++;
    }
  };
  // function makeScrollNext(idx) => {
  //   return () => {
  //     if (!codesContainer) return;
  //
  //     if (!isPaused) {
  //       if (currentIndex >= codes.length) {
  //         currentIndex = 0;
  //       }
  //
  //       codesContainer.scrollLeft = codes[currentIndex].offsetLeft;
  //       currentIndex++;
  //     }
  //   }
  // }

  let interval = setInterval(scrollNext, intervalTime);
  const resetTimer = () => {
    minDiff = Infinity;
    closestIndex = undefined;
    return;
    clearInterval(interval);
    interval = setInterval(scrollNext, intervalTime);
  };

  codesContainer?.addEventListener("mouseenter", function () {
    isPaused = true;
    console.log({ isPaused });
  });

  const mouseEventWithinRect = (event: MouseEvent, rect: DOMRect): boolean => {
    return (
      event.clientX >= rect.left &&
      event.clientX <= rect.right &&
      event.clientY >= rect.top &&
      event.clientY <= rect.bottom
    );
  };
  codesContainer?.addEventListener("mouseleave", function (event) {
    const codesHeader = document.querySelector(".codes-header");
    if (!codesHeader) return;

    const codesHeaderRect = codesHeader.getBoundingClientRect();
    if (mouseEventWithinRect(event as MouseEvent, codesHeaderRect)) {
      return;
    }

    isPaused = false;
    console.log({ isPaused });
    resetTimer();
  });

  let minDiff = Infinity;
  let closestIndex: number | undefined;
  codesContainer?.addEventListener("scroll", function () {
    if (!isPaused) return;

    // codesContainer = document.querySelector(".codes-container");
    if (!codesContainer) return;

    const containerRect = codesContainer.getBoundingClientRect();
    codes.forEach((code, index) => {
      const rect = code.getBoundingClientRect();
      const diff = Math.abs(rect.left - containerRect.left);

      if (diff < minDiff) {
        minDiff = diff;
        closestIndex = index;
      }
    });
    console.log({ closestIndex, minDiff });
    if (closestIndex !== undefined) currentIndex = closestIndex;
    if (
      codes[codes.length - 1].getBoundingClientRect().right <=
      containerRect.left + codesContainer.clientWidth
    ) {
      currentIndex = 0;
    }
    if (currentIndex >= codes.length - 1) {
      currentIndex = 0;
    }
    console.log({ currentIndex });
  });

  const iconContainer = document.querySelector("div[class*=_iconContainer]");
  iconContainer?.addEventListener("click", function () {
    const isPlay = iconContainer
      .querySelector("svg")
      ?.classList.contains("icon-tabler-player-play");

    isPaused = !isPlay;
    if (isPaused) {
      resetTimer();
    }
    console.log({ isPaused });
  });

  // const observer = new window.IntersectionObserver(
  //   (entries) => {
  //     entries.forEach(console.log);
  //     const leftmostEntry = entries.reduce((leftmost, entry) =>
  //       entry.intersectionRatio < leftmost.intersectionRatio ? entry : leftmost,
  //     );
  //     // add active class to leftmost element
  //     // if (leftmostEntry.isIntersecting) {
  //     codes.forEach((code) => code.classList.remove("active"));
  //     leftmostEntry.target.classList.add("active");
  //     // } else {
  //     //   leftmostEntry.target.classList.remove("active");
  //     // }
  //   },
  //   { threshold: 1 },
  // );
  //
  // codes.forEach((code) => observer.observe(code));
</script>
